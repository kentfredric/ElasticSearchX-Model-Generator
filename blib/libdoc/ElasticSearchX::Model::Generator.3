.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.26)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ElasticSearchX::Model::Generator 3"
.TH ElasticSearchX::Model::Generator 3 "2013-03-13" "perl v5.17.9" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ElasticSearchX::Model::Generator \- Create a suite of ESX::Model classes from an existing mapping.
.SH "VERSION"
.IX Header "VERSION"
version 0.1.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ElasticSearchX::Model::Generator qw( generate_model );
\&
\&  my $instance = generate_model(
\&    mapping_url => \*(Aqhttp://someserver:port/path/_mapping\*(Aq,
\&    generated_base_class => \*(AqMyModel\*(Aq,
\&    base_dir => "../path/to/export/dir/"
\&  );
\&
\&  for my $document ( $instance\->documents ) {
\&    # Write the document to disk
\&    $document\->write();
\&    # Alternatively, load the generated document into memory avoiding writing to disk
\&    $document\->evaluate();
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1ALPHA\s0 Code\fR: This class at present only contains code sufficient for very simple package generation for use in creating a model from an existing mapping for the purposes of search.
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "generate_model"
.IX Subsection "generate_model"
this is just a sugar syntax for \s-1ESX:M:G\-\s0>\fInew()\fR you can elect to import to make your code slightly shorter.
.SH "METHODS"
.IX Header "METHODS"
.SS "index_names"
.IX Subsection "index_names"
.Vb 1
\&  @names = $esmg\->index_names
.Ve
.PP
returns the names of all indexes specified in the \f(CW\*(C`_mapping\*(C'\fR
.SS "index"
.IX Subsection "index"
.Vb 2
\&  $data = $esmg\->index(\*(Aq\*(Aq) # If indexes are not in the data set
\&  $data = $esmg\->index(\*(Aqcpan_v1\*(Aq) # if indexes are in the data set
.Ve
.PP
Returns the data set nested under the specified index.
.SS "type_names"
.IX Subsection "type_names"
.Vb 3
\&  @names = $esmg\->type_names( $index )
\&  @names = $esmg\->type_names(\*(Aq\*(Aq)  # return all types defined in an index\-free dataset.
\&  @names = $esmg\->type_names(\*(Aqcpan_v1\*(Aq) # return all types in the cpan_v1 index.
.Ve
.SS "type"
.IX Subsection "type"
.Vb 3
\&  $data = $esmg\->type( $index, $type )
\&  $data = $esmg\->type( \*(Aq\*(Aq, \*(AqFile\*(Aq )    # get type \*(AqFile\*(Aq from an index\-free dataset
\&  $data = $esmg\->type( \*(Aqcpan_v1\*(Aq, \*(AqFile\*(Aq )    # get type \*(AqFile\*(Aq from the cpan_v1 index
.Ve
.SS "property_names"
.IX Subsection "property_names"
.Vb 1
\&  @names = $esmg\->property_names( $index, $type )
.Ve
.SS "properties"
.IX Subsection "properties"
.Vb 1
\&  $properties = $esmg\->properties( $index, $type )
.Ve
.SS "property"
.IX Subsection "property"
.Vb 1
\&  $property = $esmg\->property( $index, $type, $propertyname )
.Ve
.SS "documents"
.IX Subsection "documents"
.Vb 3
\&  @documents = $esmg\->documents(); # all documents for all indexes
\&  @documents = $esmg\->documents(\*(Aqcpan_v1\*(Aq); # all documents for cpan_v1
\&  @documents = $esmg\->documents(\*(Aq\*(Aq); # all documents for an index\-free dataset.
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "mapping_url"
.IX Subsection "mapping_url"
.Vb 1
\&  rw, required
.Ve
.SS "base_dir"
.IX Subsection "base_dir"
.Vb 1
\&  rw, required
.Ve
.SS "generator_base_class"
.IX Subsection "generator_base_class"
.Vb 1
\&  rw, default: ElasticSearchX::Model::Generator
.Ve
.SS "generated_base_class"
.IX Subsection "generated_base_class"
.Vb 1
\&  rw, default: MyModel
.Ve
.SS "document_generator_class"
.IX Subsection "document_generator_class"
.Vb 1
\&  lazy
.Ve
.SS "attribute_generator_class"
.IX Subsection "attribute_generator_class"
.Vb 1
\&  lazy
.Ve
.SS "typename_translator_class"
.IX Subsection "typename_translator_class"
.Vb 1
\&  lazy
.Ve
.SS "document_generator"
.IX Subsection "document_generator"
.Vb 1
\&  lazy
.Ve
.SS "attribute_generator"
.IX Subsection "attribute_generator"
.Vb 1
\&  lazy
.Ve
.SS "typename_translator"
.IX Subsection "typename_translator"
.Vb 1
\&  lazy
.Ve
.SH "PRIVATE ATTRIBUTES"
.IX Header "PRIVATE ATTRIBUTES"
.SS "_mapping_content"
.IX Subsection "_mapping_content"
.Vb 1
\&  lazy
.Ve
.SS "_ua"
.IX Subsection "_ua"
.Vb 1
\&  lazy
.Ve
.SS "_mapping_data"
.IX Subsection "_mapping_data"
.Vb 1
\&  lazy
.Ve
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_build_\|_ua"
.IX Subsection "_build__ua"
returns an \f(CW\*(C`HTTP::Tiny\*(C'\fR instance.
.SS "_build_document_generator_class"
.IX Subsection "_build_document_generator_class"
.Vb 1
\&  generator_base_class + \*(Aq::DocumentGenerator\*(Aq
.Ve
.SS "_build_document_generator"
.IX Subsection "_build_document_generator"
returns an instance of \f(CW$document_generator_class\fR
.SS "_build_attribute_generator_class"
.IX Subsection "_build_attribute_generator_class"
.Vb 1
\&  generator_base_class + \*(Aq::AttributeGenerator\*(Aq
.Ve
.SS "_build_attribute_generator"
.IX Subsection "_build_attribute_generator"
returns an instance of \f(CW$attribute_generator_class\fR
.SS "_build_typename_translator_class"
.IX Subsection "_build_typename_translator_class"
.Vb 1
\&  generator_base_class + \*(Aq::TypenameTranslator\*(Aq
.Ve
.SS "_build_typename_translator"
.IX Subsection "_build_typename_translator"
returns an instance of \f(CW$typename_translator_class\fR
.SS "_build_\|_mapping_content"
.IX Subsection "_build__mapping_content"
returns the content of the \s-1URL\s0 at \f(CW\*(C`mapping_url\*(C'\fR
.SS "_build_\|_mapping_data"
.IX Subsection "_build__mapping_data"
returns the decoded data from \f(CW\*(C`JSON\*(C'\fR stored in \f(CW\*(C`_mapping_content\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentfredric@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Kent Fredric <kentfredric@gmail.com>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
